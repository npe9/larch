# Makefile for ~lp/bin/sparc/prod

PLATFORM   = sparc
MODE	   = prod
CLU        = ${CLUHOME}/exe/pclu
CLU_MSG    = Optimizing
CLU_LOCALS = false
CLU_OPT    =
LP_LIB 	   = lp.lib
PLINK	   = ${CLUHOME}/exe/plink
PL_FLAGS   = -opt

REL	   = lp3.1
BIN	   = ../..
CODE	   = ../../../code
LP_MAKE	   = ../../makefiles/${PLATFORM}.${MODE}
SDIRS      = genlib logic main names ordering parsing satisfier terms unify
SPECIAL    = ${CODE}/main/version.clu ${CODE}/genlib/interrupt.clu


# Definitions of source and object files (generated by "make Makefile")
# End of definitions

CP	= /bin/cp
RM	= /bin/rm -f
MV	= /bin/mv
LN	= /bin/ln -s
TR	= /usr/bin/tr '\012' '\040'
STRIP	= /bin/strip


# Make commands

.SUFFIXES:
.SUFFIXES: .o .clu

.clu.o:
	@echo compile $? >> .new-clu-sources

all: Makefile init compile lp

Makefile: ${LP_MAKE} .sources .equates .objects .smakefiles
	sed -n -e "1,/Definitions/p" ${LP_MAKE} 	 > Makefile
	echo "SOURCE_MAKES = `${TR} < .smakefiles`"	>> Makefile
	echo "CLU_EQUATES  = `${TR} < .equates`" 	>> Makefile
	echo "CLU_SOURCES  = `${TR} < .sources`" 	>> Makefile
	echo "C_OBJECTS    = `${TR} < .objects`" 	>> Makefile
	sed -n -e "/End of def/,$$$$p" ${LP_MAKE} 	>> Makefile

.sources .equates: ${SOURCE_MAKES} ${LP_MAKE}
	${RM} *.equ *.clu .sources .equates
	for d in ${SDIRS}; do make -f ${CODE}/$$d/Makefile link; done
	for f in ${SPECIAL}; do ${LN} $$f .; done
	ls *.clu > .sources
	ls *.equ > .equates

.smakefiles:
	${RM} .smakefiles
	for f in ${SDIRS}; do echo ${CODE}/$$f/Makefile >> .smakefiles; done

.objects: .sources
	sed -e "/\.clu/s//\.o/g" .sources > .objects


# Entries for ~lp/bin/<platform>/prod to generate lp.lib

# It is necessary to remake lp.lib explicitly each time an interface changes.
# The makefile doesn't do this automatically (by having *.clu depend on lp.lib)
# because we don't want to remake lp.lib everytime we change a .clu file.

# To remake lp.lib after adding a new interface, it is generally sufficient
# (and twice as fast) to type "make libpass".

lp.lib:	${CLU_SOURCES} ${CLU_EQUATES} lib.xfile
	make libpass P=1 MRGLIB=~CLU/lib/*.lib
	make libpass P=2 MRGLIB=${LP_LIB}

P      = 2
MRGLIB = ${LP_LIB}

libpass: lib.xfile
	@echo "Making lp.lib for ${PLATFORM}, pass $P"
	${CLU} \#me ${MRGLIB} \#xfile lib > .clu-errors
	-@echo `egrep -c ":[^0-9]"\|Undefined .clu-errors` > .errors
	@if test $P -eq 2;						      \
	    then if test `cat .errors` -gt 0;				      \
	            then echo "Check `pwd`/.clu-errors for interface errors"; \
		         touch lib.xfile;				      \
	            else echo "Interface specification finished";	      \
	                 ${RM} .clu-errors;				      \
	            fi;							      \
	    else true;							      \
	    fi

lib.xfile: .equates .sources
	echo "externals false"			> lib.xfile
	echo "ce `${TR} < .equates`"		>> lib.xfile
	for f in `cat .sources`;					      \
	    do echo "spec $$f" >> lib.xfile;		      		      \
	    done
	echo "du ${LP_LIB}"			>> lib.xfile

init:
	@${RM} .new-clu-sources

# The dependency on ${C_OBJECTS} adds file names to .new-clu-sources.

compile: ${C_OBJECTS}
	@if test -f ${LP_LIB} -o ! -s .new-clu-sources; then true;	      \
            else echo "First make lp.lib"; false;	 		      \
            fi
	@if test -s .new-clu-sources;					      \
	    then echo ${CLU_MSG} `sed -e "/^compile /s///" .new-clu-sources`; \
		 ${CLU} \#me ${LP_LIB} 				   	      \
	    		\#externals false				      \
	    		\#locals ${CLU_LOCALS}				      \
	    		\#optimize ${CLU_OPT}				      \
	    		\#ce ${CLU_EQUATES}				      \
	    		\#xfile .new-clu-sources			      \
	    		\^.clu-errors;					      \
		 echo "Done compiling clu sources";			      \
	    else echo "" >  .clu-errors;				      \
            fi
	-@echo `egrep -c ":[^0-9]"\|Undefined .clu-errors` > .errors
	@if test `cat .errors` -gt 0; 				 	      \
	    then echo "Check `pwd`/.clu-errors for compilation errors.";      \
                 false;							      \
	    else true;					                      \
	    fi

# The following dependency works around a bug in the Sun C compiler that
# causes it to fail when optimizing the translation system.c of system.clu
# with the message "no table entry for op STASG".

system.o: system.clu
	@echo ${CLU_MSG} system.clu
	@${CLU} \#me ${LP_LIB} 				   		      \
	        \#externals false				      	      \
	        \#locals ${CLU_LOCALS}				      	      \
	        \#optimize ${CLU_OPT}				      	      \
	        \#ce ${CLU_EQUATES}				      	      \
	        \#ccopt cc \\-I${CLUHOME}/include \\-w \\-c \\-temp=.         \
	        \#clu system					      	      \
	        \^.clu-sys-errors
	@echo "Done compiling system.clu"
	-@echo `egrep -c ":[^0-9]"\|Undefined .clu-sys-errors` > .errors
	@if test `cat .errors` -gt 0; 				 	      \
	    then echo "Check `pwd`/.clu-sys-errors for compilation errors.";  \
                 false;							      \
	    else true;					                      \
	    fi



lp: ${C_OBJECTS}
	@echo "Linking `pwd`/lp"
	${PLINK} ${PL_FLAGS} -o lp ${C_OBJECTS}

install: lp
	${CP} lp ${BIN}/${REL}.${PLATFORM}
	${STRIP} ${BIN}/${REL}.${PLATFORM}
	${RM} ${BIN}/lp
	${LN} ${REL}.${PLATFORM} ${BIN}/lp

tidy:
	${RM} *.old *.ckp *.bak ,* *~ \#*\# .*.old .*.ckp .*.bak .*~ core
	${RM} .new* *_b_ *_c_ clu.junk

clean: tidy
	${RM} *.equ *.clu .sources .equates .objects .smakefiles
	${RM} *.lp* lp* lib.xfile *.o
