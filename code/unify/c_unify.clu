#extend

% A procedure to unify the top level of two terms whose root function symbols
% are commutative.

% Yields a complete set of unifiers of "t1" and "t2".  ASSUMES: "t1" and "t2"
% are compound terms with commutative operators.  MODIFIES AT MOST: "vg"

c_unify = iter (t1, t2: term, osys: op_system, stab: symtab, vg: var_gen) 
	    yields (substitution) signals (not_unifiable)

    if t1.root ~= t2.root then signal not_unifiable end
       except when wrong_tag: signal not_unifiable end
    tba1: tb_arr := tb_arr$[]
    tba2: tb_arr := tb_arr$[]
    for i: int in term_seq$indexes(t1.args) do
	tb_arr$addh(tba1, term_bind${domain: t1.args[i], range: t2.args[i]})
	tb_arr$addh(tba2, term_bind${domain: t1.args[i], range: t2.args[3-i]})
	end
    yielded: bool := false
    for sigma: substitution in unify_seq(tb_seq$a2s(tba1), osys, stab, vg) do
	yielded := true
	yield(sigma)
	end
       except when not_unifiable: end
    for sigma: substitution in unify_seq(tb_seq$a2s(tba2), osys, stab, vg) do
	yielded := true
	yield(sigma)
	end
       except when not_unifiable: end
    if ~yielded then signal not_unifiable end
    end c_unify
