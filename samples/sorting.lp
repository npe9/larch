% Correctness proof for insertion sort (T. Nipkow, G. Snelting)

set log sorting
set script sorting
clear
set trace 0
set proof-methods =>, normalization


% Axioms for total orders

set name order
declare sort Elem
declare variables m, n: Elem
declare operator __<=__:  Elem, Elem -> Bool

assert m <= n \/ n <= m
prove when ~(m <= n) yield n <= m
  critical-pairs *Hyp with order
  qed
  
% Axioms for lists

set name list
declare sort List
declare variables x, y: List
declare operators
  null   :            -> List
  cons   : Elem, List -> List
  insert : Elem, List -> List
  ..
assert 
  sort List generated by null, cons;
  insert(m, null) = cons(m, null);
  insert(m, cons(n, x)) = 
    (if m <= n then cons(m, cons(n, x)) else cons(n, insert(m, x)))
  ..


% Definition of insertion sort

set name sort
declare operators
  sort   : List -> List
  sorted : List -> Bool
  ..
assert
  sort(null) = null;
  sort(cons(m, x)) = insert(m, sort(x));
  sorted(null);
  sorted(cons(m, null));
  sorted(cons(m, cons(n, x))) <=> m <= n /\ sorted(cons(n, x))
  ..


% Definition of bags

set name bag
declare sort Bag
declare variable b: Bag
declare operators
  bagify : List     -> Bag
  {}     :          -> Bag
  {__}   : Elem     -> Bag
  __+__  : Bag, Bag -> Bag
  ..
assert 
  sort Bag generated by {}, {__}, +;
  ac +;
  {} + b = b;
  bagify(null) = {};
  bagify(cons(m, x)) = {m} + bagify(x)
  ..


% Lemmas for conditionals

set name if
declare variable p: Bool
prove sorted(if p then x else y) <=> (if p then sorted(x) else sorted(y)) 
  resume by case p
  qed
prove bagify(if p then x else y) = (if p then bagify(x) else bagify(y)) 
  resume by case p
  qed
forget


% Prove that the insertion sort sorts the list

set name lemma
prove sorted(cons(n, x)) => sorted(insert(m, cons(n, x))) by induction
   resume by case m <= nc
   resume by case mc <= ec
   critical-pairs *Hyp with *Hyp				% for last case
  qed

prove sorted(x) => sorted(insert(n, x)) by induction	  	% lemma.2
  critical-pairs *Hyp with lemma
  qed

set name theorem
prove sorted(sort(x)) by induction				% main theorem
  critical-pairs *Hyp with lemma
  qed


% Prove that the insertion sort permutes the list

set name theorem
prove bagify(insert(m, x)) = bagify(x) + {m} by induction
  qed
prove bagify(sort(x)) = bagify(x) by induction
  qed
statistics
