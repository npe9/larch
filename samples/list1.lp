% Proofs by induction about lists.

set script list1
set log list1
clear
set trace 0
set name list

declare sorts Element, List
declare variables e: Element, x, y, z: List
declare operators
  null   :               -> List
  cons   : Element, List -> List
  append : List, List    -> List
  rev    : List          -> List
  ..

% Axioms

assert 
  sort List generated by null, cons;
  append(null, x) = x;
  append(cons(e, y), z) = cons(e, append(y, z));
  rev(null) = null;
  rev(cons(e, y)) = append(rev(y), cons(e, null))
  ..


% Theorems

set name theorem

prove rev(rev(x)) = x by induction

% We need a lemma about rev(append(x, y)).

prove rev(append(x, y)) = append(rev(y), rev(x)) by induction on x

% We need another lemma, which we obtain by generalization.

prove append(x, null) = x by induction

% We need another lemma (the associativity of append), which we can also
% obtain by generalization.

prove append(append(x, y), z) = append(x, append(y, z)) by induction on x
qed
statistics


% An alternative proof uses a single lemma, which can be obtained by 
% treating the induction constant as a variable and computing critical 
% pairs between the induction hypothesis and the lemma to be proved in 
% the induction step.

delete theorem
prove rev(append(x, cons(e, null))) = cons(e, rev(x)) by induction on x
qed
prove rev(rev(x)) = x by induction
qed
statistics
